<?xml version="1.0" encoding="UTF-8" ?>
<Module>
	<ModulePrefs
        title="__MSG_title__"
        description="__MSG_description__"
        author="Scott Walter"
        author_location="Minneapolis, MN"
        author_affiliation="Epic Media"
        author_email="sjwalter+GoogleGadget@gmail.com"
        author_photo="http://epicmedia-gadgets.googlecode.com/svn/trunk/photo.png"
        author_link="http://www.epicmedia.com/"
		thumbnail="__MSG_thumbnail__"
		screenshot="__MSG_screenshot__"
		>
		<Locale messages="http://epicmedia-gadgets.googlecode.com/svn/trunk/event-calendar/ALL_ALL.xml" /> 
		<Require feature="opensocial-0.7" />
		<Require feature="google.blog" />
		<Require feature="skins" />
		<Require feature="views" />
	</ModulePrefs>

	<UserPref
		name="calAddress"
		display_name="__MSG_calAddress__"
		required="true"
		default_value="" 
		datatype="string"
		/>

	<UserPref
		name="calEntries"
		display_name="__MSG_calEntries__"
		required="true"
		default_value="5" 
		datatype='string'
		/>

	<UserPref
		name="displayContent"
		display_name="__MSG_displayContent__"
		datatype="bool"
		default_value="false" 
		/>

	<Content type="html"><![CDATA[
<div id="agenda__MODULE_ID__" style='padding: 0 10px;font-size: 80%;'><p><i>__MSG_loading__</i></p></div>
<script type="text/javascript">
<!--
	// First off, all credit goes to the team at BloggerBuster.com for creating this gadget.
	// I merely modified the code a bit for my needs. - SJW
	/**
	 * Converts an xs:date or xs:dateTime formatted string into the local timezone
	 * and outputs a human-readable form of this date or date/time.
	 *
	 * @param {string} gCalTime is the xs:date or xs:dateTime formatted string
	 * @return {string} is the human-readable date or date/time string
	 */
	function formatGCalTime__MODULE_ID__(gCalTime) { 
		// text for regex matches
		var remtxt = gCalTime;

		var theMonthNames = new Array();
		theMonthNames[1] = "__MSG_january__";
		theMonthNames[2] = "__MSG_february__";
		theMonthNames[3] = "__MSG_march__";
		theMonthNames[4] = "__MSG_april__";
		theMonthNames[5] = "__MSG_may__";
		theMonthNames[6] = "__MSG_june__";
		theMonthNames[7] = "__MSG_july__";
		theMonthNames[8] = "__MSG_august__";
		theMonthNames[9] = "__MSG_september__";
		theMonthNames[10] = "__MSG_october__";
		theMonthNames[11] = "__MSG_november__";
		theMonthNames[12] = "__MSG_december__";

		function consume(retxt) {
			var match = remtxt.match(new RegExp('^' + retxt));
			if (match) {
				remtxt = remtxt.substring(match[0].length);
				return match[0];
			}

			return '';
		}

		// minutes of correction between gCalTime and GMT
		var totalCorrMins = 0;

		var year = consume('\\d{4}');
		if (year < 1000)
			year+=1900;
			
		consume('-?');
		var month = consume('\\d{2}');
		consume('-?');
		var dateMonth = consume('\\d{2}');
		var timeOrNot = consume('T');

		// if a DATE-TIME was matched in the regex 
		if (timeOrNot == 'T') {
			var hours = consume('\\d{2}');
			consume(':?');
			
			var mins = consume('\\d{2}');
			consume('(:\\d{2})?(\\.\\d{3})?');
			
			var zuluOrNot = consume('Z');

			// if time from server is not already in GMT, calculate offset
			if (zuluOrNot != 'Z') {
				var corrPlusMinus = consume('[\\+\\-]');
				if (corrPlusMinus != '') {
					var corrHours = consume('\\d{2}');
					consume(':?');
					var corrMins = consume('\\d{2}');
					totalCorrMins	=	(corrPlusMinus=='-' ? 1 : -1) 
									*	(Number(corrHours) * 60 
											+ (corrMins=='' ? 0 : Number(corrMins))
										)
									;
				}
			} 

			// get time since epoch and apply correction, if necessary
			// relies upon Date object to convert the GMT time to the local
			// timezone
			var originalDateEpoch = Date.UTC(year, month - 1, dateMonth, hours, mins);
			var gmtDateEpoch = originalDateEpoch + totalCorrMins * 1000 * 60;
			var ld = new Date(gmtDateEpoch);
			var theMonth = (ld.getMonth() + 1);

			// date is originally in YYYY-MM-DD format
			// time is originally in a 24-hour format
			// this converts it to MM/DD hh:mm (AM|PM) 
			dateString	=	theMonthNames[theMonth] + ' ' + ld.getDate() + ', ' + (ld.getYear() + 1900) + ' ' 
						+	' - '
						+ 	(
								(ld.getHours()>12)	?	(ld.getHours()-12) 
													:	(ld.getHours()===0	? 12
																			: ld.getHours()
														)
							) 
						+	':' 
						+	(
								(ld.getMinutes()<10)	?	('0' + ld.getMinutes())
														:	(ld.getMinutes())
							)
						+	' ' + ((ld.getHours()>=12) ? 'PM' : 'AM')
						;
		} else {
			// if only a DATE was matched

			var monthnum = parseInt(month, 10);

			dateString =  theMonthNames[monthnum] + ' ' + parseInt(dateMonth, 10) + ', ' + parseInt(year, 10);
		}
		
		return dateString;
	}

	/**
	 * Creates an unordered list of events in a human-readable form
	 *
	 * @param {json} root is the root JSON-formatted content from GData
	 * @param {string} divId is the div in which the events are added
	 */ 
	function listEvents__MODULE_ID__(root, divId) {
		var feed = root.feed;
		var events = document.getElementById(divId);

		if (events.childNodes.length > 0) {
			events.removeChild(events.childNodes[0]);
		}	  

		// create a new unordered list
		var ul = document.createElement('div');

		// loop through each event in the feed
		for (var i = 0; i < feed.entry.length; i++) {
			var entry = feed.entry[i];
			var title = entry.title.$t;
			var where = entry['gd$where'][0].valueString;
			var content = entry.content.$t;
			var start = entry['gd$when'][0].startTime;

			// get the URL to link to the event
			for (var linki = 0; linki < entry['link'].length; linki++) {
				if (entry['link'][linki]['type'] == 'text/html' && entry['link'][linki]['rel'] == 'alternate') {
					var entryLinkHref = entry['link'][linki]['href'];
				}
			}

			var dateString = formatGCalTime__MODULE_ID__(start);
			var li = document.createElement('div');
			li.style.margin = '0 0 20px 0';
			var viewParams = gadgets.views.getParams();

			// if we have a link to the event, create an 'a' element
			if (typeof entryLinkHref != 'undefined') {
				entryDate = document.createElement('div');
				entryDate.setAttribute('class', 'date');
				entryDate.appendChild(document.createTextNode(dateString));
				li.appendChild(entryDate);

				entryLink = document.createElement('a');
				entryLink.style.color = gadgets.skins.getProperty('CONTENT_LINK_COLOR');
				entryLink.setAttribute('href', 'http://maps.google.com/maps?hl=en&q=' + escape(where));
				entryLink.setAttribute('target','_blank');
				entryLink.appendChild(document.createTextNode(where));
				li.appendChild(entryLink);
				
				if (viewParams["displayContent"] == true) {
					entryContent = document.createElement('div');
					entryContent.appendChild(document.createTextNode(content));
					li.appendChild(entryContent);
				}
			} else {
				entryDate = document.createElement('div');
				entryDate.setAttribute('class', 'date');
				entryDate.appendChild(document.createTextNode(dateString));
				li.appendChild(entryDate);

				entryLink.appendChild(document.createTextNode(where));
				li.appendChild(entryLink);

				entryContent = document.createElement('div');
				entryContent.appendChild(document.createTextNode(content));
				li.appendChild(entryContent);
			}

			// append the list item onto the unordered list
			ul.appendChild(li);
		}
		
		events.appendChild(ul);
	}

	/**
	* Callback function for the GData json-in-script call
	* Inserts the supplied list of events into a div of a pre-defined name
	* 
	* @param {json} root is the JSON-formatted content from GData
	*/ 
	function insertAgenda__MODULE_ID__(obj) {
		listEvents__MODULE_ID__(obj.data, 'agenda__MODULE_ID__');
	}

	function run__MODULE_ID__() {
		var backgroundColor = gadgets.skins.getProperty('CONTENT_BG_COLOR');
		document.body.style.backgroundColor = 'transparent';
		textColor = gadgets.skins.getProperty('CONTENT_TEXT_COLOR');
		document.body.style.color = textColor;
		var prefs = new gadgets.Prefs();
		var viewParams = gadgets.views.getParams();
		var theCal = viewParams["calAddress"];
		var numEvents = viewParams["calEntries"];
		
		var params = {};
		params[gadgets.io.RequestParameters.CONTENT_TYPE] = gadgets.io.ContentType.JSON;
		// This URL returns a JSON-encoded string that represents a JavaScript object
		var url	=	"http:\/\/www.google.com\/calendar\/feeds\/" 
				+	theCal
				+	"\/public\/full?alt=json&orderby=starttime&max-results=" 
				+	numEvents
				+	"&singleevents=true&sortorder=ascending&futureevents=true"
				;
				
		alert(url);

		gadgets.io.makeRequest(url, insertAgenda__MODULE_ID__, params);
		
		// gadgets.window.adjustHeight();
	}

	gadgets.util.registerOnLoadHandler(run__MODULE_ID__);
//-->
</script>
]]>
	</Content>
</Module>